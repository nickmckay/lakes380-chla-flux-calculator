tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
dplyr::select(c("time","chla_flux","chla_conc","sed_rate","dbd"))
long <- tib %>%
tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
dplyr::select(c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
tidyr::pivot_longer(cols = -time)
names(long)
View(long)
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value, color = name))
fluxPlot
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value, color = name)) +
facet_grid(name ~ .,scales = "free_y")
fluxPlot
long <- tib %>%
tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
dplyr::select(c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
tidyr::pivot_longer(cols = -time,names_to = "variable")
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value)) +
facet_grid(factor(variable,levels = c("chla_flux","chla_conc","sed_rate","dbd")) ~ .,scales = "free_y") +
theme_bw()
fluxPlot
geoChronR::heuristicUnits
heuristicUnits <- function(X,range.min = 25){
if(is.list(X)){
if(all(is.na(X$values))){
return(NA)
}
miv <- min(X$values,na.rm = TRUE)
mav <- max(X$values,na.rm = TRUE)
rv <- diff(range(X$values, na.rm = TRUE))
}else{
if(all(is.na(X))){
return(X)
}
miv <- min(X,na.rm = TRUE)
mav <- max(X,na.rm = TRUE)
rv <- diff(range(X, na.rm = TRUE))
}
#See if the highest value would be in the future for AD
todayCheckAD <-  mav > as.numeric(substring(date(),21))
#See if the lowest values would be in the future for BP
todayCheckBP <- miv < convertAD2BP(as.numeric(substring(date(),21)))
#see if range of values implies ka not BP
rangeCheck <- rv < range.min
#now work out some scenarios
if(todayCheckBP & !todayCheckAD){
unitGuess <- "AD"
}else if(!todayCheckBP & todayCheckAD){
unitGuess <- "BP"
}else if(rangeCheck){
unitGuess <- "ka"
}else if(todayCheckBP & todayCheckAD){
unitGuess <- "somethings wrong here, doesn't seem to be AD, BP, or ka"
}else{
if(miv > 0 & mav > 1900){
unitGuess <- "AD"
}else if(miv >-50  & mav < 100){
unitGuess <- "BP"
}else{
unitGuess <- "cant make a reasonable guess"
}
}
return(unitGuess)
}
unitGuess <- heuristicUnits(tib$time)
unitGuess
tib$time
heuristicUnits <- function(X,range.min = 25){
if(is.list(X)){
if(all(is.na(X$values))){
return(NA)
}
miv <- min(X$values,na.rm = TRUE)
mav <- max(X$values,na.rm = TRUE)
rv <- diff(range(X$values, na.rm = TRUE))
}else{
if(all(is.na(X))){
return(X)
}
miv <- min(X,na.rm = TRUE)
mav <- max(X,na.rm = TRUE)
rv <- diff(range(X, na.rm = TRUE))
}
#See if the highest value would be in the future for AD
todayCheckAD <-  mav > as.numeric(substring(date(),21))
#See if the lowest values would be in the future for BP
todayCheckBP <- miv < convertAD2BP(as.numeric(substring(date(),21)))
#see if range of values implies ka not BP
rangeCheck <- rv < range.min
#now work out some scenarios
if(todayCheckBP & !todayCheckAD){
unitGuess <- "AD"
}else if(!todayCheckBP & todayCheckAD){
unitGuess <- "BP"
}else if(rangeCheck){
unitGuess <- "ka"
}else if(todayCheckBP & todayCheckAD){
unitGuess <- "somethings wrong here, doesn't seem to be AD, BP, or ka"
}else{
if(miv > 0 & mav > 1900){
unitGuess <- "AD"
}else if(miv >-50  & mav < 100){
unitGuess <- "BP"
}else{
unitGuess <- "cant make a reasonable guess"
}
}
return(unitGuess)
}
unitGuess <- heuristicUnits(tib$time[[1]])
heuristicUnits <- function(X,range.min = 25){
if(is.list(X)){
if(all(is.na(X$values))){
return(NA)
}
miv <- min(X$values,na.rm = TRUE)
mav <- max(X$values,na.rm = TRUE)
rv <- diff(range(X$values, na.rm = TRUE))
}else{
if(all(is.na(X))){
return(X)
}
miv <- min(X,na.rm = TRUE)
mav <- max(X,na.rm = TRUE)
rv <- diff(range(X, na.rm = TRUE))
}
#See if the highest value would be in the future for AD
todayCheckAD <-  mav > as.numeric(substring(date(),21))
#See if the lowest values would be in the future for BP
todayCheckBP <- miv < 1950 - (as.numeric(substring(date(),21)))
#see if range of values implies ka not BP
rangeCheck <- rv < range.min
#now work out some scenarios
if(todayCheckBP & !todayCheckAD){
unitGuess <- "AD"
}else if(!todayCheckBP & todayCheckAD){
unitGuess <- "BP"
}else if(rangeCheck){
unitGuess <- "ka"
}else if(todayCheckBP & todayCheckAD){
unitGuess <- "somethings wrong here, doesn't seem to be AD, BP, or ka"
}else{
if(miv > 0 & mav > 1900){
unitGuess <- "AD"
}else if(miv >-50  & mav < 100){
unitGuess <- "BP"
}else{
unitGuess <- "cant make a reasonable guess"
}
}
return(unitGuess)
}
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
devtools::load_all(".")
unitGuess <- heuristicUnits(tib$time)
unitGuess
X <- tib$time
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
X <- tib$time[[1]]
miv <- min(X,na.rm = TRUE)
mav <- max(X,na.rm = TRUE)
rv <- diff(range(X, na.rm = TRUE))
miv
mav
rv
#See if the highest value would be in the future for AD
todayCheckAD <-  mav > as.numeric(substring(date(),21))
#See if the lowest values would be in the future for BP
todayCheckBP <- miv < 1950 - (as.numeric(substring(date(),21)))
#see if range of values implies ka not BP
rangeCheck <- rv < range.min
todayCheckBP
1950 - (as.numeric(substring(date(),21)))
miv
todayCheckAD
miv
miv
miv >-50
(as.numeric(substring(date(),21)))
todayCheckBP
miv
devtools::load_all(".")
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
devtools::load_all(".")
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
miv
miv > 1950 - (as.numeric(substring(date(),21)))
& mav < 100
mav < 100
mav
devtools::load_all(".")
miv
1950 - (as.numeric(substring(date(),21)))
devtools::load_all(".")
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
miv > 1950 - (as.numeric(substring(date(),21)))
miv < 100
rm(heuristicUnits())
rm(heuristicUnits
)
unitGuess <- heuristicUnits(tib$time[[1]])
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value)) +
facet_grid(factor(variable,levels = c("chla_flux","chla_conc","sed_rate","dbd")) ~ .,scales = "free_y") +
theme_bw() +
xlab("Year AD") +
ylab("")
unitGuess <- heuristicUnits(tib$time[[1]])
if(unitGuess == "BP"){
tib$time <- 1950-tib$time
}
unitGuess <- heuristicUnits(tib$time[[1]])
if(unitGuess == "BP"){
tib$time[[1]] <- 1950-tib$time[[1]]
}
long <- tib %>%
tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
dplyr::select(c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
tidyr::pivot_longer(cols = -time,names_to = "variable")
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value)) +
facet_grid(factor(variable,levels = c("chla_flux","chla_conc","sed_rate","dbd")) ~ .,scales = "free_y") +
theme_bw() +
xlab("Year AD") +
ylab("")
fluxPlot
?facet_grid
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value)) +
facet_grid(factor(variable,levels = c("chla_flux","chla_conc","sed_rate","dbd")) ~ .,scales = "free_y",switch = "both") +
theme_bw() +
xlab("Year AD") +
ylab("")
fluxPlot
use_r("output")
devtools::load_all(".")
plot_flux(test)
out <- chla_flux_to_tibble(test)
View(out)
devtools::check()
use_mit_license()
use_package(ggplot2)
use_package("ggplot2")
devtools::load_all(".")
devtools::check()
use_package("dplyr")
use_package("tibble")
use_package("magrittr")
devtools::check()
use_package("lipdR")
lakes <- c("LakeOporoa_17286.Lakes380.lpd","LakeWiritoa_18934.Lakes380.lpd")
file.path("~/Dropbox/lipdverse/Lakes380National/",lakes)
D <- readLipd(file.path("~/Dropbox/lipdverse/Lakes380National/",lakes))
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380)
wi <- estimate_chla_flux_lipd(D$LakeWiritoa_18934.Lakes380)
op_plot <- plot_flux(op)
op_plot
spline
t <- predict(spline)
plot(t)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380)
devtools::load_all(".")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380)
op_plot <- plot_flux(op)
op_plot
wi <- estimate_chla_flux_lipd(D$LakeWiritoa_18934.Lakes380)
wi_plot
wi_plot <- plot_flux(wi)
wi_plot
op_data <- chla_flux_to_tibble(op)
ggsave(op_plot,filename = file.path(output_folder,"OporoaFluxPlot.pdf"))
output_folder <- "~/Download"
ggsave(op_plot,filename = file.path(output_folder,"OporoaFluxPlot.pdf"))
ggsave(wi_plot,filename = file.path(output_folder,"WiritoaFluxPlot.pdf"))
write_csv(x = op_data,file.path(output_folder,"OporoaData.csv"))
wi_data <- chla_flux_to_tibble(wi)
write_csv(x = wi_data,file.path(output_folder,"WiritoaData.csv"))
op_data <- chla_flux_to_tibble(op)
write_csv(x = op_data,file.path(output_folder,"OporoaData.csv"))
output_folder <- "~/Download"
lakes <- c("LakeOporoa_17286.Lakes380.lpd","LakeWiritoa_18934.Lakes380.lpd")
D <- readLipd(file.path("~/Dropbox/lipdverse/Lakes380National/",lakes))
devtools::load_all(".")
output_folder <- "~/Download"
lakes <- c("LakeOporoa_17286.Lakes380.lpd","LakeWiritoa_18934.Lakes380.lpd")
D <- readLipd(file.path("~/Dropbox/lipdverse/Lakes380National/",lakes))
library(lipdR)
output_folder <- "~/Download"
lakes <- c("LakeOporoa_17286.Lakes380.lpd","LakeWiritoa_18934.Lakes380.lpd")
D <- readLipd(file.path("~/Dropbox/lipdverse/Lakes380National/",lakes))
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380)
op_plot <- plot_flux(op) + ggtitle("Oporoa")
library(geoChronR)
op_plot_nosmooth <- plot_flux(op) + ggtitle("Oporoa")
library(ggplot2)
op_plot_nosmooth <- plot_flux(op) + ggtitle("Oporoa")
op_plot_nosmooth
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = FALSE)
plot_flux(op) + ggtitle("Oporoa")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = 0)
plot_flux(op) + ggtitle("Oporoa")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = NA)
op
plot_flux(op) + ggtitle("Oporoa")
devtools::load_all(".")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = 0)
op_plot_nosmooth <- plot_flux(op) + ggtitle("Oporoa")
op_plot_nosmooth
plot_flux(op) + ggtitle("Oporoa")
devtools::load_all(".")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = 0)
plot_flux(op) + ggtitle("Oporoa")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = 0)
bad <- which(!is.finite(sr) | !is.finite(depth_mid))
sr
smooth
plot_flux(op) + ggtitle("Oporoa") + xlim(c(1900,200))
plot_flux(op) + ggtitle("Oporoa") + xlim(c(1900,2000))
plot_flux(op) + ggtitle("Oporoa") + scale_x_continuous(breaks = seq(1000,2000,by = 100))
usethis::use_version("minor")
usethis::use_version("minor")
input_file <- "~/Download/ALICE_LC1U_Data.xlsx"
output_folder <- "~/Download"
xl_hsi <- read_excel(input_file,sheet = "HSI")
library(readxl)
library(ggplot2)
library(readr)
library(Lakes380ChlaFluxCalculator)
xl_hsi <- read_excel(input_file,sheet = "HSI")
depth_bins <- 1:ceiling(max(xl_hsi$`composite dblf (mm)`,na.rm = TRUE)) #HSI depth column here
devtools::load_all(".")
#bin to mm
RABD660670 <- bin(xl_hsi$`composite dblf (mm)`, #HSI depth column here
xl_hsi$RABD660670, #RABD660670 c0olumn here
bin.vec = depth_bins)
depth_mid <- RABD660670$x
#get ages
xl_chron_head <- names(read_excel(input_file,
sheet = "Chronology",
skip = 0))
xl_chron <- read_excel(input_file,
sheet = "Chronology",
skip = 1)
names(xl_chron) <- xl_chron_head
chronDepths <- xl_chron$ShCal20_t #chronology Year AD column here
agesOnHsiDepths <- Hmisc::approxExtrap(x = xl_chron$`z (dblf)`*10, #chronology depth column here (adjusted by 10 for mm)
y = 1950-xl_chron$ShCal20_t, #chronology Year AD column here
xout = depth_mid)$y
plot(agesOnHsiDepths,RABD660670$y)
op <- estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE)
depth_mid
depth_mid[1]
op
estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE)
op[1,]
View(op)
alice <- estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE)
input_file <- "~/Download/WIRIT_LC3U_Data.xlsx"
output_folder <- "~/Download"
xl_hsi <- read_excel(input_file,sheet = "HSI")
depth_bins <- 1:ceiling(max(xl_hsi$`composite dblf (mm)`,na.rm = TRUE)) #HSI depth column here
depth_bins
#bin to mm
RABD660670 <- bin(xl_hsi$`composite dblf (mm)`, #HSI depth column here
xl_hsi$RABD660670, #RABD660670 c0olumn here
bin.vec = depth_bins)
depth_mid <- RABD660670$x
#get ages
xl_chron_head <- names(read_excel(input_file,
sheet = "Chronology",
skip = 0))
xl_chron <- read_excel(input_file,
sheet = "Chronology",
skip = 1)
names(xl_chron) <- xl_chron_head
chronDepths <- xl_chron$ShCal20_t #chronology Year AD column here
agesOnHsiDepths <- Hmisc::approxExtrap(x = xl_chron$`z (dblf)`*10, #chronology depth column here (adjusted by 10 for mm)
y = 1950-xl_chron$ShCal20_t, #chronology Year AD column here
xout = depth_mid)$y
plot(agesOnHsiDepths,RABD660670$y)
wirit <- estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE)
wirit$dbd[[1]][1]
alice$dbd[[1]][1]
aliceOut <- chla_flux_to_tibble(alice)
write_csv(x = aliceOut,file.path(output_folder,"alice.csv"))
wiritOut <- chla_flux_to_tibble(wirit)
write_csv(x = wiritOut,file.path(output_folder,"wirit.csv"))
alicePlot <- plot_flux(alice) + ggtitle("Alice from excel")
alicePlot
wiritPlot <- plot_flux(wirit) + ggtitle("Wirit from excel")
wiritPlot
ggsave(alicePlot,filename = file.path(output_folder,"AliceFluxPlot.pdf"))
ggsave(wiritPlot,filename = file.path(output_folder,"WiritoaFluxPlot.pdf"))
alicePlot <- plot_flux(alice) + ggtitle("Alice from excel") + xlim(c(1600,2020))
ggsave(alicePlot,filename = file.path(output_folder,"AliceFluxPlot.pdf"))
ggsave(wiritPlot,filename = file.path(output_folder,"WiritoaFluxPlot.pdf")) + xlim(c(1600,2020))
write_csv(x = wiritOut,file.path(output_folder,"wirit.csv"))
ggsave(op_plot,filename = file.path(output_folder,"OporoaFluxPlot.pdf"))
wiritPlot <- plot_flux(wirit) + ggtitle("Wirit from excel") + xlim(c(1600,2020))
ggsave(wiritPlot,filename = file.path(output_folder,"WiritoaFluxPlot.pdf")) + xlim(c(1600,2020))
alicePlot <- plot_flux(alice) + ggtitle("Alice from excel") + xlim(c(1600,2010))
ggsave(alicePlot,filename = file.path(output_folder,"AliceFluxPlot.pdf"))
ggsave(wiritPlot,filename = file.path(output_folder,"WiritoaFluxPlot.pdf")) + xlim(c(1600,2010))
ggsave(op_plot,filename = file.path(output_folder,"OporoaFluxPlot.pdf"))
wiritPlot <- plot_flux(wirit) + ggtitle("Wirit from excel") + xlim(c(1600,2010))
ggsave(wiritPlot,filename = file.path(output_folder,"WiritoaFluxPlot.pdf"))
input_file <- "~/Download/WIRIT_LC3U_Data.xlsx"
output_folder <- "~/Download"
xl_hsi <- read_excel(input_file,sheet = "HSI")
depth_bins <- 1:500 #ceiling(max(xl_hsi$`composite dblf (mm)`,na.rm = TRUE)) #HSI depth column here
#bin to mm
RABD660670 <- bin(xl_hsi$`composite dblf (mm)`, #HSI depth column here
xl_hsi$RABD660670, #RABD660670 c0olumn here
bin.vec = depth_bins)
depth_mid <- RABD660670$x
#get ages
xl_chron_head <- names(read_excel(input_file,
sheet = "Chronology",
skip = 0))
xl_chron <- read_excel(input_file,
sheet = "Chronology",
skip = 1)
names(xl_chron) <- xl_chron_head
chronDepths <- xl_chron$ShCal20_t #chronology Year AD column here
agesOnHsiDepths <- Hmisc::approxExtrap(x = xl_chron$`z (dblf)`*10, #chronology depth column here (adjusted by 10 for mm)
y = 1950-xl_chron$ShCal20_t, #chronology Year AD column here
xout = depth_mid)$y
wirit <- estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE)
wiritPlot <- plot_flux(wirit) + ggtitle("Wirit from excel") + xlim(c(1600,2010))
wiritPlot <- plot_flux(wirit) + ggtitle("Wirit from excel")
wiritPlot
wiritOut <- chla_flux_to_tibble(wirit)
write_csv(x = wiritOut,file.path(output_folder,"wirit.csv"))
depth_bins <- 1:ceiling(max(xl_hsi$`composite dblf (mm)`,na.rm = TRUE)) #HSI depth column here
#bin to mm
RABD660670 <- bin(xl_hsi$`composite dblf (mm)`, #HSI depth column here
xl_hsi$RABD660670, #RABD660670 c0olumn here
bin.vec = depth_bins)
depth_mid <- RABD660670$x
#get ages
xl_chron_head <- names(read_excel(input_file,
sheet = "Chronology",
skip = 0))
xl_chron <- read_excel(input_file,
sheet = "Chronology",
skip = 1)
names(xl_chron) <- xl_chron_head
chronDepths <- xl_chron$ShCal20_t #chronology Year AD column here
agesOnHsiDepths <- Hmisc::approxExtrap(x = xl_chron$`z (dblf)`*10, #chronology depth column here (adjusted by 10 for mm)
y = 1950-xl_chron$ShCal20_t, #chronology Year AD column here
xout = depth_mid)$y
agesOnHsiDepths
agesOnHsiDepths <- Hmisc::approxExtrap(x = xl_chron$`z (dblf)`*10, #chronology depth column here (adjusted by 10 for mm)
y = 1950-xl_chron$ShCal20_t, #chronology Year AD column here
xout = depth_mid)$y
plot(agesOnHsiDepths,RABD660670$y)
wirit <- estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE)
wirit
devtools::load_all(".")
wirit <- estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE,max.time = 1600)
devtools::load_all(".")
devtools::load_all(".")
wirit <- estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE,
max.time = 1600)
wiritPlot <- plot_flux(wirit) + ggtitle("Wirit from excel")
wiritPlot
wirit <- estimate_chla_flux(depth = depth_mid,
time = agesOnHsiDepths,
rabd660670 = RABD660670$y,
smooth = TRUE,
max.time = 400)
wiritPlot <- plot_flux(wirit) + ggtitle("Wirit from excel")
wiritPlot
ggsave(wiritPlot,filename = file.path(output_folder,"WiritoaFluxPlot.pdf"))
wiritOut <- chla_flux_to_tibble(wirit)
write_csv(x = wiritOut,file.path(output_folder,"wirit.csv"))
usethis::use_version("patch")

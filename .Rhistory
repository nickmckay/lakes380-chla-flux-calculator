library(usethis)
use_r("calibrate")
use_r("density")
use_r("flux")
L <- readLipd()
library(lipdR)
L <- readLipd()
devtools::load_all(".")
dblf <- seq(0,150)
dbd <- estimate_dbd(dblf)
plot(dblf,dbd)
devtools::load_all(".")
dbd <- estimate_dbd(dblf)
plot(dblf,dbd)
ts <- as.lipdTsTibble(L)
use_r("sedrate")
library(tidyverse)
cts <- filter(ts,paleoData_variableName == "RABD660670")
bts <- ts
ts <- cts
time <- ts$age
depth <- ts$depth
plot(depth,time)
time <- ts$age[[1]]
depth <- ts$depth[[1]]
plot(depth,time)
dt <- diff(time)
depth_mid <- rowMeans(cbind(depth[-1],depth[-length(depth)]))
plot(depth_mid,dt)
#get change in time
dt <- diff(time)
dd <- diff(depth)
sr <- dd/dt
depth_mid <- rowMeans(cbind(depth[-1],depth[-length(depth)]))
plot(depth_mid,s)
plot(depth_mid,sr)
use_package("Hmisc")
srOut <- Hmisc::approxExtrap(depth_mid,sr,xout = depth)
plot(time,srOut)
time <- ts$age[[1]]
depth <- ts$depth[[1]]
#get change in time
dt <- diff(time)
dd <- diff(depth)
sr <- dd/dt
depth_mid <- rowMeans(cbind(depth[-1],depth[-length(depth)]))
srOut <- Hmisc::approxExtrap(depth_mid,sr,xout = depth)
plot(time,srOut)
srOut <- Hmisc::approxExtrap(depth_mid,sr,xout = depth)
srOut <- Hmisc::approxExtrap(depth_mid,sr,xout = depth)$y
srOut <- Hmisc::approxExtrap(depth_mid,sr,xout = depth)
srOut <- Hmisc::approxExtrap(depth_mid,sr,xout = depth)$y
plot(time,srOut)
smooth <- 12
spline <- smooth.spline(depth_mid,y = sr, df = smooth)
sr <- dd/dt
depth_mid <- rowMeans(cbind(depth[-1],depth[-length(depth)]))
spline <- smooth.spline(depth_mid,y = sr, df = smooth)
sum(is.na(sr))
sum(is.na(depth_mid))
sum(!is.finite(depth_mid))
sum(!is.finite(sr))
which(!is.finite(sr))
sr[1:20]
bad <- which(!is.finite(sr) | !is.finite(depth_mid))
bad <- which(!is.finite(sr) | !is.finite(depth_mid))
if(length(bad) > 0){
sr <- sr[-bad]
depth_mid <- depth_mid[-bad]
}
if(!all(is.na(smooth))){
spline <- smooth.spline(depth_mid,y = sr, df = smooth)
}
plot(spline)
smooth <- 100
if(!all(is.na(smooth))){
spline <- smooth.spline(depth_mid,y = sr, df = smooth)
}
plot(spline)
smooth <- abs(diff(range(depth_mid)))/2
smooth
spline <- smooth.spline(depth_mid,y = sr, df = smooth)
plot(spline)
lines(spline)
plot(depth_mid,sr)
lines(spline)
devtools::load_all(".")
use_r("wrapper")
rabd_ts <- cts
time <- rabd_ts$age[[1]]
depth <- rabd_ts$depth[[1]]
rabd660670 <- rabd_ts$paleoData_values
rabd660670 <- rabd_ts$paleoData_values[[1]]
geoClass <- rabd_ts$geo_geoClass
#calculate sub-components
chla_conc <- calibrate_rabd660670(rabd660670,geoClass)
sed_rate <- estimate_sed_rate_from_median(time,depth,smooth = TRUE)
dbd <- estimate_dbd(depth)
devtools::load_all(".")
test <- estimate_flux_lipd(L)
plot(test$age[[1]],test$chla_flux[[1]])
plot(test$age[[1]],test$chla_conc[[1]])
devtools::load_all(".")
test <- estimate_flux_lipd(L)
test <- estimate_chla_flux_lipd(L)
test <- estimate_chla_flux_lipd(L)
mts <- estimate_chla_flux(depth, time,rabd660670, geoClass, smooth = smooth )
ts <- dplyr::bind_cols(ts,mts)
ots <- dplyr::bind_cols(rabd_ts,mts)
devtools::load_all(".")
test <- estimate_chla_flux_lipd(L)
use_r("plot")
devtools::load_all(".")
test <- estimate_chla_flux_lipd(L)
tib <- test
long <- tib %>%
tidyr::unchop()
names(tib)
long <- tib %>%
tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd"))
use_package("tidyr")
use_package("ggplot2")
long <- tib %>%
tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
dplyr::select(c("time","chla_flux","chla_conc","sed_rate","dbd"))
long <- tib %>%
tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
dplyr::select(c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
tidyr::pivot_longer(cols = -time)
names(long)
View(long)
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value, color = name))
fluxPlot
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value, color = name)) +
facet_grid(name ~ .,scales = "free_y")
fluxPlot
long <- tib %>%
tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
dplyr::select(c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
tidyr::pivot_longer(cols = -time,names_to = "variable")
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value)) +
facet_grid(factor(variable,levels = c("chla_flux","chla_conc","sed_rate","dbd")) ~ .,scales = "free_y") +
theme_bw()
fluxPlot
geoChronR::heuristicUnits
heuristicUnits <- function(X,range.min = 25){
if(is.list(X)){
if(all(is.na(X$values))){
return(NA)
}
miv <- min(X$values,na.rm = TRUE)
mav <- max(X$values,na.rm = TRUE)
rv <- diff(range(X$values, na.rm = TRUE))
}else{
if(all(is.na(X))){
return(X)
}
miv <- min(X,na.rm = TRUE)
mav <- max(X,na.rm = TRUE)
rv <- diff(range(X, na.rm = TRUE))
}
#See if the highest value would be in the future for AD
todayCheckAD <-  mav > as.numeric(substring(date(),21))
#See if the lowest values would be in the future for BP
todayCheckBP <- miv < convertAD2BP(as.numeric(substring(date(),21)))
#see if range of values implies ka not BP
rangeCheck <- rv < range.min
#now work out some scenarios
if(todayCheckBP & !todayCheckAD){
unitGuess <- "AD"
}else if(!todayCheckBP & todayCheckAD){
unitGuess <- "BP"
}else if(rangeCheck){
unitGuess <- "ka"
}else if(todayCheckBP & todayCheckAD){
unitGuess <- "somethings wrong here, doesn't seem to be AD, BP, or ka"
}else{
if(miv > 0 & mav > 1900){
unitGuess <- "AD"
}else if(miv >-50  & mav < 100){
unitGuess <- "BP"
}else{
unitGuess <- "cant make a reasonable guess"
}
}
return(unitGuess)
}
unitGuess <- heuristicUnits(tib$time)
unitGuess
tib$time
heuristicUnits <- function(X,range.min = 25){
if(is.list(X)){
if(all(is.na(X$values))){
return(NA)
}
miv <- min(X$values,na.rm = TRUE)
mav <- max(X$values,na.rm = TRUE)
rv <- diff(range(X$values, na.rm = TRUE))
}else{
if(all(is.na(X))){
return(X)
}
miv <- min(X,na.rm = TRUE)
mav <- max(X,na.rm = TRUE)
rv <- diff(range(X, na.rm = TRUE))
}
#See if the highest value would be in the future for AD
todayCheckAD <-  mav > as.numeric(substring(date(),21))
#See if the lowest values would be in the future for BP
todayCheckBP <- miv < convertAD2BP(as.numeric(substring(date(),21)))
#see if range of values implies ka not BP
rangeCheck <- rv < range.min
#now work out some scenarios
if(todayCheckBP & !todayCheckAD){
unitGuess <- "AD"
}else if(!todayCheckBP & todayCheckAD){
unitGuess <- "BP"
}else if(rangeCheck){
unitGuess <- "ka"
}else if(todayCheckBP & todayCheckAD){
unitGuess <- "somethings wrong here, doesn't seem to be AD, BP, or ka"
}else{
if(miv > 0 & mav > 1900){
unitGuess <- "AD"
}else if(miv >-50  & mav < 100){
unitGuess <- "BP"
}else{
unitGuess <- "cant make a reasonable guess"
}
}
return(unitGuess)
}
unitGuess <- heuristicUnits(tib$time[[1]])
heuristicUnits <- function(X,range.min = 25){
if(is.list(X)){
if(all(is.na(X$values))){
return(NA)
}
miv <- min(X$values,na.rm = TRUE)
mav <- max(X$values,na.rm = TRUE)
rv <- diff(range(X$values, na.rm = TRUE))
}else{
if(all(is.na(X))){
return(X)
}
miv <- min(X,na.rm = TRUE)
mav <- max(X,na.rm = TRUE)
rv <- diff(range(X, na.rm = TRUE))
}
#See if the highest value would be in the future for AD
todayCheckAD <-  mav > as.numeric(substring(date(),21))
#See if the lowest values would be in the future for BP
todayCheckBP <- miv < 1950 - (as.numeric(substring(date(),21)))
#see if range of values implies ka not BP
rangeCheck <- rv < range.min
#now work out some scenarios
if(todayCheckBP & !todayCheckAD){
unitGuess <- "AD"
}else if(!todayCheckBP & todayCheckAD){
unitGuess <- "BP"
}else if(rangeCheck){
unitGuess <- "ka"
}else if(todayCheckBP & todayCheckAD){
unitGuess <- "somethings wrong here, doesn't seem to be AD, BP, or ka"
}else{
if(miv > 0 & mav > 1900){
unitGuess <- "AD"
}else if(miv >-50  & mav < 100){
unitGuess <- "BP"
}else{
unitGuess <- "cant make a reasonable guess"
}
}
return(unitGuess)
}
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
devtools::load_all(".")
unitGuess <- heuristicUnits(tib$time)
unitGuess
X <- tib$time
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
X <- tib$time[[1]]
miv <- min(X,na.rm = TRUE)
mav <- max(X,na.rm = TRUE)
rv <- diff(range(X, na.rm = TRUE))
miv
mav
rv
#See if the highest value would be in the future for AD
todayCheckAD <-  mav > as.numeric(substring(date(),21))
#See if the lowest values would be in the future for BP
todayCheckBP <- miv < 1950 - (as.numeric(substring(date(),21)))
#see if range of values implies ka not BP
rangeCheck <- rv < range.min
todayCheckBP
1950 - (as.numeric(substring(date(),21)))
miv
todayCheckAD
miv
miv
miv >-50
(as.numeric(substring(date(),21)))
todayCheckBP
miv
devtools::load_all(".")
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
devtools::load_all(".")
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
miv
miv > 1950 - (as.numeric(substring(date(),21)))
& mav < 100
mav < 100
mav
devtools::load_all(".")
miv
1950 - (as.numeric(substring(date(),21)))
devtools::load_all(".")
unitGuess <- heuristicUnits(tib$time[[1]])
unitGuess
miv > 1950 - (as.numeric(substring(date(),21)))
miv < 100
rm(heuristicUnits())
rm(heuristicUnits
)
unitGuess <- heuristicUnits(tib$time[[1]])
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value)) +
facet_grid(factor(variable,levels = c("chla_flux","chla_conc","sed_rate","dbd")) ~ .,scales = "free_y") +
theme_bw() +
xlab("Year AD") +
ylab("")
unitGuess <- heuristicUnits(tib$time[[1]])
if(unitGuess == "BP"){
tib$time <- 1950-tib$time
}
unitGuess <- heuristicUnits(tib$time[[1]])
if(unitGuess == "BP"){
tib$time[[1]] <- 1950-tib$time[[1]]
}
long <- tib %>%
tidyr::unchop(cols = c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
dplyr::select(c("time","chla_flux","chla_conc","sed_rate","dbd")) %>%
tidyr::pivot_longer(cols = -time,names_to = "variable")
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value)) +
facet_grid(factor(variable,levels = c("chla_flux","chla_conc","sed_rate","dbd")) ~ .,scales = "free_y") +
theme_bw() +
xlab("Year AD") +
ylab("")
fluxPlot
?facet_grid
fluxPlot <- ggplot(long) +
geom_line(aes(x = time, y = value)) +
facet_grid(factor(variable,levels = c("chla_flux","chla_conc","sed_rate","dbd")) ~ .,scales = "free_y",switch = "both") +
theme_bw() +
xlab("Year AD") +
ylab("")
fluxPlot
use_r("output")
devtools::load_all(".")
plot_flux(test)
out <- chla_flux_to_tibble(test)
View(out)
devtools::check()
use_mit_license()
use_package(ggplot2)
use_package("ggplot2")
devtools::load_all(".")
devtools::check()
use_package("dplyr")
use_package("tibble")
use_package("magrittr")
devtools::check()
use_package("lipdR")
lakes <- c("LakeOporoa_17286.Lakes380.lpd","LakeWiritoa_18934.Lakes380.lpd")
file.path("~/Dropbox/lipdverse/Lakes380National/",lakes)
D <- readLipd(file.path("~/Dropbox/lipdverse/Lakes380National/",lakes))
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380)
wi <- estimate_chla_flux_lipd(D$LakeWiritoa_18934.Lakes380)
op_plot <- plot_flux(op)
op_plot
spline
t <- predict(spline)
plot(t)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380)
devtools::load_all(".")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380)
op_plot <- plot_flux(op)
op_plot
wi <- estimate_chla_flux_lipd(D$LakeWiritoa_18934.Lakes380)
wi_plot
wi_plot <- plot_flux(wi)
wi_plot
op_data <- chla_flux_to_tibble(op)
ggsave(op_plot,filename = file.path(output_folder,"OporoaFluxPlot.pdf"))
output_folder <- "~/Download"
ggsave(op_plot,filename = file.path(output_folder,"OporoaFluxPlot.pdf"))
ggsave(wi_plot,filename = file.path(output_folder,"WiritoaFluxPlot.pdf"))
write_csv(x = op_data,file.path(output_folder,"OporoaData.csv"))
wi_data <- chla_flux_to_tibble(wi)
write_csv(x = wi_data,file.path(output_folder,"WiritoaData.csv"))
op_data <- chla_flux_to_tibble(op)
write_csv(x = op_data,file.path(output_folder,"OporoaData.csv"))
output_folder <- "~/Download"
lakes <- c("LakeOporoa_17286.Lakes380.lpd","LakeWiritoa_18934.Lakes380.lpd")
D <- readLipd(file.path("~/Dropbox/lipdverse/Lakes380National/",lakes))
devtools::load_all(".")
output_folder <- "~/Download"
lakes <- c("LakeOporoa_17286.Lakes380.lpd","LakeWiritoa_18934.Lakes380.lpd")
D <- readLipd(file.path("~/Dropbox/lipdverse/Lakes380National/",lakes))
library(lipdR)
output_folder <- "~/Download"
lakes <- c("LakeOporoa_17286.Lakes380.lpd","LakeWiritoa_18934.Lakes380.lpd")
D <- readLipd(file.path("~/Dropbox/lipdverse/Lakes380National/",lakes))
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380)
op_plot <- plot_flux(op) + ggtitle("Oporoa")
library(geoChronR)
op_plot_nosmooth <- plot_flux(op) + ggtitle("Oporoa")
library(ggplot2)
op_plot_nosmooth <- plot_flux(op) + ggtitle("Oporoa")
op_plot_nosmooth
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = FALSE)
plot_flux(op) + ggtitle("Oporoa")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = 0)
plot_flux(op) + ggtitle("Oporoa")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = NA)
op
plot_flux(op) + ggtitle("Oporoa")
devtools::load_all(".")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = 0)
op_plot_nosmooth <- plot_flux(op) + ggtitle("Oporoa")
op_plot_nosmooth
plot_flux(op) + ggtitle("Oporoa")
devtools::load_all(".")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = 0)
plot_flux(op) + ggtitle("Oporoa")
op <- estimate_chla_flux_lipd(D$LakeOporoa_17286.Lakes380,smooth = 0)
bad <- which(!is.finite(sr) | !is.finite(depth_mid))
sr
smooth
plot_flux(op) + ggtitle("Oporoa") + xlim(c(1900,200))
plot_flux(op) + ggtitle("Oporoa") + xlim(c(1900,2000))
plot_flux(op) + ggtitle("Oporoa") + scale_x_continuous(breaks = seq(1000,2000,by = 100))
usethis::use_version("minor")
usethis::use_version("minor")
